{"version":3,"sources":["webpack:///./src/components/Header.jsx","webpack:///./src/templates/produse.js"],"names":["Header","image","children","className","fluid","data","useState","scrollTop","setScrollTop","showSecondNav","setShowSecondNav","scrollRef","useRef","useEffect","onScroll","e","target","documentElement","window","addEventListener","removeEventListener","state","images","edges","pageName","pageContext","slug","split","displayedName","length","replace","hero","node","childImageSharp","Provider","value","id","current","style","position","top","ref","map","discover2","to","query"],"mappings":"6FAAA,wDAYeA,IARA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAC/B,OACI,kBAAC,IAAD,CAAiBC,MAAOH,EAAOE,UAAS,iBAAkBA,GAAwB,KAC7ED,K,6DCPb,wLAUe,mBAAAG,GAAS,IAAD,EACaC,mBAAS,GAApCC,EADc,KACHC,EADG,OAEqBF,oBAAS,GAA5CG,EAFc,KAECC,EAFD,KAGfC,EAAYC,mBAElBC,qBAAU,WAENH,EADEH,GAAa,KAMjB,IAAMO,EAAW,SAAAC,GACfP,EAAaO,EAAEC,OAAOC,gBAAgBV,YAIxC,OAFAW,OAAOC,iBAAiB,SAAUL,GAE3B,kBAAMI,OAAOE,oBAAoB,SAAUN,MACjD,CAACP,IAlBiB,IAoBdc,EAASf,oBAAS,WACvB,IAAMgB,EAASjB,EAAKA,KAAKiB,OAAOC,MAC1BC,EAAWnB,EAAKoB,YAAYC,KAAKC,MAAM,KAG7C,MAAO,CACLL,SACAM,cAJoBJ,EAASA,EAASK,OAAS,GAAGC,QAAQ,KAAM,SAvB/C,GA+BrB,OAAO,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAQ7B,MAAOI,EAAKA,KAAK0B,KAAKR,MAAM,GAAGS,KAAKC,gBAAgB7B,MAAOD,UAAU,+BAC3E,yBAAKA,UAAU,4BACb,kBAAC,IAAmB+B,SAApB,CAA6BC,MAAO,CAAE1B,eAAgBA,EAAeC,qBACnE,kBAAC,IAAD,CAAYP,UAAU,0BAExB,yBAAKA,UAAU,gBAAgBiC,GAAG,kBAClC,2BAAIf,EAAMO,iBAIZjB,EAAU0B,SAAY9B,GAAa,KAAQ,yBAAK+B,MAAO,CAAEC,SAAU,WAAYC,IAAK,QAClF,kBAAC,IAAmBN,SAApB,CAA6BC,MAAO,CAAE1B,gBAAeC,qBACnD,kBAAC,IAAD,QAIN,yBAAKP,UAAU,iBAAiBsC,IAAK9B,GAEjCU,EAAMC,OAAOoB,KAAI,SAACzC,GAAD,OACf,0BAAME,UAAU,mBAAkB,kBAAC,IAAD,CAAOC,MAAOH,EAAM+B,KAAKC,gBAAgB7B,MAAOD,UAAU,eAIlG,kBAAC,IAAD,CAAiBC,MAAOC,EAAKA,KAAKsC,UAAUV,gBAAgB7B,MAAOD,UAAU,kBAC3E,yBAAKA,UAAU,kBACf,yDACA,kBAAC,OAAD,CAAMyC,GAAG,YAAT,cAKC,IAAMC,EAAK","file":"component---src-templates-produse-js-f7ed81f9fca29756b5fc.js","sourcesContent":["import React from \"react\"\nimport BackGroundImage from 'gatsby-background-image'\nimport \"./header.scss\"\n\nconst Header = ({ image, children, className }) => {\n    return (\n        <BackGroundImage fluid={image} className={`header-image ${className ? className : ''}`} >\n            {children}\n        </BackGroundImage>\n    )\n}\n\nexport default Header","import React, { useState, useRef, useEffect } from 'react'\nimport { graphql, Link } from \"gatsby\"\nimport Layout from '../components/Layout'\nimport Header from '../components/Header'\nimport Navigation from '../components/Navigation'\nimport Image from \"gatsby-image\"\nimport \"./styles.scss\"\nimport BackgroundImage from 'gatsby-background-image'\nimport { DismissMenuContext } from \"../utils/context\"\n\nexport default data => {\n  const [scrollTop, setScrollTop] = useState(0);\n  const [showSecondNav, setShowSecondNav] = useState(false)\n  const scrollRef = useRef()\n\n  useEffect(() => {\n    if (scrollTop >= 200) {\n      setShowSecondNav(true)\n    } else {\n      setShowSecondNav(false)\n    }\n\n    const onScroll = e => {\n      setScrollTop(e.target.documentElement.scrollTop);\n    };\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollTop]);\n\n  const [state] = useState(() => {\n    const images = data.data.images.edges\n    const pageName = data.pageContext.slug.split('/')\n    const displayedName = pageName[pageName.length - 1].replace(/-/g, ' ')\n\n    return {\n      images,\n      displayedName\n    }\n  })\n\n  return <Layout>\n    <Header image={data.data.hero.edges[0].node.childImageSharp.fluid} className=\"header-cataloage header-mid\">\n      <div className=\"header-cataloage_content\">\n        <DismissMenuContext.Provider value={{ showSecondNav: !showSecondNav, setShowSecondNav }}>\n          <Navigation className=\"navigation-cataloage\" />\n        </DismissMenuContext.Provider>\n        <div className=\"header-filter\" id=\"header-filter\"></div>\n        <p>{state.displayedName}</p>\n      </div>\n    </Header>\n    {\n      scrollRef.current && (scrollTop >= 200) && <div style={{ position: \"absolute\", top: \"0px\" }}>\n        <DismissMenuContext.Provider value={{ showSecondNav, setShowSecondNav }}>\n          <Navigation />\n        </DismissMenuContext.Provider>\n      </div>\n    }\n    <div className=\"produse-images\" ref={scrollRef}>\n      {\n        state.images.map((image) => (\n          <span className=\"image_container\"><Image fluid={image.node.childImageSharp.fluid} className=\"image\" /></span>\n        ))\n      }\n    </div>\n    <BackgroundImage fluid={data.data.discover2.childImageSharp.fluid} className=\"discover-image\">\n      <div className=\"header-filter\"></div>\n      <p>Ai un plan? ContacteazÄƒ-ne</p>\n      <Link to=\"/contact\">Contact</Link>\n    </BackgroundImage>\n  </Layout >\n}\n\nexport const query = graphql`\nquery ($slug:String!,$hero:String,$images:String){\n  names:allFile(filter:{relativeDirectory:{eq:$slug}}) {\n    edges {\n      node {\n        name\n      }\n    }\n  }\n  discover2:file(relativePath:{eq:\"discover2.png\"}) {\n    childImageSharp {\n      fluid(maxWidth:1600,maxHeight:750) {\n        ...GatsbyImageSharpFluid\n      }\n    }\n  }\n  hero:allFile(filter:{relativeDirectory:{eq:$hero}}) {\n    edges {\n      node {\n        childImageSharp {\n          fluid(maxWidth:1600) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n  images:allFile(filter:{relativeDirectory:{eq:$images}}) {\n    edges {\n      node {\n        childImageSharp {\n          fluid(maxWidth:300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n}\n`"],"sourceRoot":""}